{"version":3,"sources":["types/SortField.ts","components/GoodList/GoodList.tsx","components/SortPanel/SortPanel.tsx","App.tsx","index.tsx"],"names":["SortField","GoodList","goods","map","good","SortPanel","sortPanelData","sortField","isReverse","setSortField","setIsReverse","isShowResetButton","className","onClick","Alphabet","type","cn","Length","prev","Default","goodsFromServer","App","useState","visibleGoods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,4DAAAA,K,oBAAAA,E,gBAAAA,E,YAAAA,M,gBCMCC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,S,gBCUjBC,EAA6B,SAAC,GAOpC,IAAD,IANJC,cACEC,EAKE,EALFA,UACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,aACAC,EAEE,EAFFA,aAGIC,EAAoBJ,GAAaC,EAmBvC,OACE,sBAAKI,UAAU,UAAf,UACE,wBACEC,QAXqB,WACzBJ,EAAaT,EAAUc,WAWnBC,KAAK,SACLH,UAAWI,IAAG,SAAU,UAAW,CACjC,WAAYT,IAAcP,EAAUc,WAJxC,iCAUA,wBACED,QAjBmB,WACvBJ,EAAaT,EAAUiB,SAiBnBF,KAAK,SACLH,UAAWI,IAAG,SAAU,aAAc,CACpC,WAAYT,IAAcP,EAAUiB,SAJxC,4BAUA,wBACEJ,QAnCgB,WACpBH,GAAa,SAAAQ,GAAI,OAAKA,MAmClBH,KAAK,SACLH,UAAWI,IAAG,SAAU,aAAc,CACpC,YAAaR,IAJjB,qBAUCG,GACC,wBACEE,QAnDM,WACZJ,EAAaT,EAAUmB,SACvBT,GAAa,IAkDPK,KAAK,SACLH,UAAU,4BAHZ,uBCvEKQ,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAoCWC,EAAM,WACjB,MAAkCC,mBAAStB,EAAUmB,SAArD,mBAAOZ,EAAP,KAAkBE,EAAlB,KACA,EAAkCa,oBAAS,GAA3C,mBAAOd,EAAP,KAAkBE,EAAlB,KACMa,EA/BiB,SACvBrB,EADuB,GAGnB,IADFK,EACC,EADDA,UAAWC,EACV,EADUA,UAEPgB,EAAa,YAAOtB,GAiB1B,OAfIK,GACFiB,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQpB,GACN,KAAKP,EAAUc,SACb,OAAOY,EAAME,cAAcD,GAE7B,KAAK3B,EAAUiB,OACb,OAAOS,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXrB,EACKgB,EAAcM,UAGhBN,EAMcO,CAAiBX,EAAiB,CACrDb,YACAC,cAGF,OACE,sBAAKI,UAAU,kBAAf,UACE,cAAC,EAAD,CAAWN,cAAe,CACxBC,YACAC,YACAC,eACAC,kBAIF,cAAC,EAAD,CAAUR,MAAOqB,QCrEvBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5b6d27b2.chunk.js","sourcesContent":["export enum SortField {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Default = '',\n}\n","import React from 'react';\n\ntype Props = {\n  goods: string[],\n};\n\nexport const GoodList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>\n        {good}\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport { SortField } from '../../types/SortField';\n\ntype Callback = (prev: boolean) => boolean;\n\ntype SortPanelData = {\n  sortField: SortField,\n  isReverse: boolean,\n  setSortField: (sortField: SortField) => void,\n  setIsReverse: (arg: Callback | boolean) => void,\n};\n\ntype Props = {\n  sortPanelData: SortPanelData,\n};\n\nexport const SortPanel: React.FC<Props> = ({\n  sortPanelData: {\n    sortField,\n    isReverse,\n    setSortField,\n    setIsReverse,\n  },\n}) => {\n  const isShowResetButton = sortField || isReverse;\n\n  const reset = () => {\n    setSortField(SortField.Default);\n    setIsReverse(false);\n  };\n\n  const toggleReverse = () => {\n    setIsReverse(prev => !prev);\n  };\n\n  const handleAlphabetSort = () => {\n    setSortField(SortField.Alphabet);\n  };\n\n  const handleLengthSort = () => {\n    setSortField(SortField.Length);\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button\n        onClick={handleAlphabetSort}\n        type=\"button\"\n        className={cn('button', 'is-info', {\n          'is-light': sortField !== SortField.Alphabet,\n        })}\n      >\n        Sort alphabetically\n      </button>\n\n      <button\n        onClick={handleLengthSort}\n        type=\"button\"\n        className={cn('button', 'is-success', {\n          'is-light': sortField !== SortField.Length,\n        })}\n      >\n        Sort by length\n      </button>\n\n      <button\n        onClick={toggleReverse}\n        type=\"button\"\n        className={cn('button', 'is-warning', {\n          'is-light': !isReverse,\n        })}\n      >\n        Reverse\n      </button>\n\n      {isShowResetButton && (\n        <button\n          onClick={reset}\n          type=\"button\"\n          className=\"button is-danger is-light\"\n        >\n          Reset\n        </button>\n      )}\n    </div>\n  );\n};\n","import 'bulma/css/bulma.css';\nimport { useState } from 'react';\n\nimport './App.scss';\nimport { SortField } from './types/SortField';\nimport { GoodList } from './components/GoodList';\nimport { SortPanel } from './components/SortPanel';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface SortParams {\n  sortField: SortField,\n  isReverse: boolean,\n}\n\nconst getPreparedGoods = (\n  goods: string[],\n  { sortField, isReverse }: SortParams,\n) => {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortField.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortField.Default);\n  const [isReverse, setIsReverse] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReverse,\n  });\n\n  return (\n    <div className=\"section content\">\n      <SortPanel sortPanelData={{\n        sortField,\n        isReverse,\n        setSortField,\n        setIsReverse,\n      }}\n      />\n\n      <GoodList goods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}